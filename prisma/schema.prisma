// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Felinos {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome        String    @db.VarChar(50)
  idade       Int       @db.SmallInt
  raca        Raca
  dataResgate DateTime?
  fiv         Boolean
  felv        Boolean
  pif         Boolean
  isolado     Boolean
  observacao  String    @db.Text

  //relações
  vacinacoes VacinacoesRealizadas[]
  protocolos ProtocoloVacinal[]
}

model Vacinas {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome String @db.VarChar(50)

  //relações
  aplicacoes VacinacoesRealizadas[]
  protocolos ProtocoloVacinal[]

  @@unique([nome])
}

model VacinacoesRealizadas {
  felinoId     String   @db.Uuid
  vacinaId     String   @db.Uuid
  dataApliccao DateTime @default(now())
  valorPago    Float    @db.Real

  //Relaçoes
  felino Felinos @relation(fields: [felinoId], references: [id])
  vacina Vacinas @relation(fields: [vacinaId], references: [id])

  @@id([felinoId, vacinaId, dataApliccao]) //3 atributos como id para ter mais de uma dose para mesmo gato
}

model ProtocoloVacinal {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  felinoId String @db.Uuid
  vacinaId String @db.Uuid

  dosesNecessarias          Int         @db.SmallInt // Ex: 3 (dose inicial + 2 reforços)
  intervaloEntreDosesEmDias Int         @db.SmallInt // Ex: 21 (dias)
  status                    StatusCiclo

  // Relações
  felino Felinos @relation(fields: [felinoId], references: [id])
  vacina Vacinas @relation(fields: [vacinaId], references: [id])

  // Garante que um gato só tenha um protocolo ativo para cada tipo de vacina
  @@unique([felinoId, vacinaId])
}

model Voluntarios {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome            String   @db.VarChar(50)
  telefone        String   @db.VarChar(12)
  turno           Turno
  largadouro      String   @db.VarChar(255)
  bairro          String   @db.VarChar(255)
  cidade          String   @db.VarChar(255)
  cep             String?  @db.VarChar(8)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt
}

model Usuarios {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome            String   @db.VarChar(50)
  login           String   @db.VarChar(255)
  senha           String   @db.VarChar(255)
  perfil          Perfil
  dataCriacao     DateTime @default(now())
  dataAtualziacao DateTime @updatedAt
}

enum Perfil {
  Administrador
  Gerencial
}

enum StatusCiclo {
  PENDENTE // O ciclo foi definido, mas nenhuma dose foi aplicada
  EM_ANDAMENTO // Doses foram aplicadas, mas o ciclo não está completo e não está atrasado
  ATRASADO // O prazo para a próxima dose expirou
  COMPLETO // Todas as doses necessárias foram aplicadas
}

enum Turno {
  matutino
  vespertino
  noturno
}

enum Raca {
  sem_raca
  siames
  persa
}
