// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Felinos {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome        String    @db.VarChar(50)
  idade       Int       @db.SmallInt
  raca        Raca
  dataResgate DateTime?
  fiv         Boolean
  felv        Boolean
  pif         Boolean
  isolado     Boolean
  observacao  String    @db.Text

  // RELAÇÃO SIMPLIFICADA: Um felino agora tem apenas uma lista de protocolos.
  // As vacinas aplicadas são acessadas através de cada protocolo.
  protocolos ProtocoloVacinal[]
}

model Vacinas {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome String @unique @db.VarChar(50)

  // RELAÇÃO SIMPLIFICADA: Uma vacina está presente em vários protocolos.
  protocolos ProtocoloVacinal[]
}

// RENOMEADO: Para maior clareza, VacinacoesRealizadas -> AplicacaoVacina
// Esta tabela agora representa uma ÚNICA dose de uma vacina.
model AplicacaoVacina {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Adicionado um ID único para facilitar a identificação de cada aplicação

  laboratorio   String   @db.VarChar(255)
  lote          String   @db.VarChar(255)
  medVet        String   @db.VarChar(50)
  dataAplicacao DateTime @default(now())
  valorPago     Float    @db.Real

  // Relação clara: Cada aplicação pertence a UM protocolo.
  protocoloVacinalId String           @db.Uuid
  protocoloVacinal   ProtocoloVacinal @relation(fields: [protocoloVacinalId], references: [id])
}

// Esta é a tabela central que gerencia o ciclo de vacinação.
model ProtocoloVacinal {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  felinoId String @db.Uuid
  vacinaId String @db.Uuid

  dosesNecessarias          Int               @db.SmallInt // Ex: 3 (dose inicial + 2 reforços)
  intervaloEntreDosesEmDias Int               @db.SmallInt // Ex: 21 (dias)
  status                    StatusCiclo
  ativo                     Boolean           @default(true)
  dataProximaVacina         DateTime?
  requerReforcoAnual        Boolean
  dataLembreteProximoCiclo  DateTime?
  // Relações
  felino                    Felinos           @relation(fields: [felinoId], references: [id])
  vacina                    Vacinas           @relation(fields: [vacinaId], references: [id])
  aplicacoes                AplicacaoVacina[] // Um protocolo é composto por uma ou mais aplicações (doses)

  // Garante que só existe um protocolo por felino/vacina.
  @@unique([felinoId, vacinaId, ativo])
}

// Models Voluntarios e Usuarios permanecem os mesmos
model Voluntarios {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome            String   @db.VarChar(50)
  telefone        String   @db.VarChar(12)
  turno           Turno
  largadouro      String   @db.VarChar(255)
  bairro          String   @db.VarChar(255)
  cidade          String   @db.VarChar(255)
  cep             String?  @db.VarChar(8)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt
}

model Usuarios {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome            String   @db.VarChar(50)
  login           String   @db.VarChar(255)
  senha           String   @db.VarChar(255)
  perfil          Perfil
  dataCriacao     DateTime @default(now())
  dataAtualziacao DateTime @updatedAt
}

// Enums permanecem os mesmos
enum Perfil {
  Administrador
  Gerencial
}

enum StatusCiclo {
  PENDENTE
  EM_ANDAMENTO
  ATRASADO
  COMPLETO
}

enum Turno {
  matutino
  vespertino
  noturno
}

enum Raca {
  sem_raca
  siames
  persa
}
